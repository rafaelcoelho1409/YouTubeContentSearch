services:
  # FastAPI Service
  fastapi:
    build:
      context: ./fastapi_app
      dockerfile: Dockerfile.fastapi
    container_name: fastapi_app
    ports:
      - "8000:8000"
    volumes:
      - ./fastapi_app:/app  # Bind mount for live code updates
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
    networks:
      - my_network

  # Streamlit Service
  streamlit:
    build:
      context: ./streamlit_app
      dockerfile: Dockerfile.streamlit
    container_name: streamlit_app
    ports:
      - "8501:8501"
    environment:
      - NEO4J_URI=bolt://neo4j:7687  # Use the Neo4j service name as the host
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
    volumes:
      - ./streamlit_app:/app  # Bind mount for live code updates
    depends_on:
      - fastapi
    networks:
      - my_network

  # Neo4j Service (for future use)
  neo4j:
    build:
      context: ./neo4j_app  # Path to your Neo4j Dockerfile directory
      dockerfile: Dockerfile.neo4j
    container_name: neo4j
    environment:
      - NEO4J_AUTH=neo4j/password
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./neo4j_app:/app
      #- ./neo4j_app/plugins:/var/lib/neo4j/plugins  # Persistent plugin storage
      #- ./neo4j_app/conf:/var/lib/neo4j/conf  # Persistent config storage
    networks:
      - my_network
  mlflow:
    build:
      context: ./mlflow_app
      dockerfile: Dockerfile.mlflow
    container_name: mlflow_app
    ports:
      - "5000:5000"
    volumes:
      - ./mlflow_app:/app  # Bind mount for live code updates
    networks:
      - my_network

# Volumes and Networks
volumes:
  neo4j_data:

networks:
  my_network:
    driver: bridge